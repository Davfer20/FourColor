#include <iostream>
#include <vector>
using namespace std;

void regiones();
int mapaRegiones[6][8]; // Aca de decide como se va a construir el mapa

int region1 = 1;
int region2 = 2;
int region3 = 3;
int region4 = 4;
int region5 = 5;
int region6 = 6;
int region7 = 7;
int region8 = 8;

int listaRegiones[] = {1, 2, 3, 4, 5, 6, 7, 8};

// Ahora se contruye el mapa manualmente como uno prefiera
void regiones()
{
    // Region a
    mapaRegiones[1][1] = region1;
    mapaRegiones[1][2] = region1;
    mapaRegiones[2][1] = region1;
    mapaRegiones[3][1] = region1;
    // Region b
    mapaRegiones[1][3] = region2;
    mapaRegiones[2][2] = region2;
    mapaRegiones[2][3] = region2;
    mapaRegiones[3][2] = region2;
    mapaRegiones[3][3] = region2;
    // Region c
    mapaRegiones[1][4] = region3;
    mapaRegiones[1][5] = region3;
    mapaRegiones[2][4] = region3;
    mapaRegiones[2][5] = region3;
    mapaRegiones[3][4] = region3;
    mapaRegiones[3][5] = region3;
    // Region d
    mapaRegiones[1][6] = region4;
    mapaRegiones[2][6] = region4;
    mapaRegiones[3][6] = region4;
    mapaRegiones[4][5] = region4;
    mapaRegiones[4][6] = region4;
    // Region e
    mapaRegiones[1][7] = region5;
    mapaRegiones[2][7] = region5;
    mapaRegiones[3][7] = region5;
    mapaRegiones[4][7] = region5;
    mapaRegiones[5][7] = region5;
    mapaRegiones[6][7] = region5;
    mapaRegiones[7][7] = region5;
    mapaRegiones[5][5] = region5;
    mapaRegiones[6][5] = region5;
    mapaRegiones[5][6] = region5;
    mapaRegiones[6][6] = region5;
    mapaRegiones[5][8] = region5;
    mapaRegiones[6][8] = region5;
    // Region f
    mapaRegiones[1][8] = region6;
    mapaRegiones[2][8] = region6;
    mapaRegiones[3][8] = region6;
    mapaRegiones[4][8] = region6;
    // Region g
    mapaRegiones[4][1] = region7;
    mapaRegiones[5][1] = region7;
    mapaRegiones[5][2] = region7;
    mapaRegiones[5][3] = region7;
    mapaRegiones[6][1] = region7;
    // Region h
    mapaRegiones[4][2] = region8;
    mapaRegiones[4][3] = region8;
    mapaRegiones[4][4] = region8;
    mapaRegiones[5][3] = region8;
    mapaRegiones[5][4] = region8;
    mapaRegiones[6][2] = region8;
    mapaRegiones[6][3] = region8;
    mapaRegiones[6][4] = region8;
}

struct tipoRegion // Esta es la clase para cada region
{
    int id;
    int color;
    int adyacentes[5];
};

int repeticion(int pNum) // Es para cambiar de color
{
    int indice, indiceSec;
    pNum = pNum % 4;
    if (pNum == 0) // Valida el error que sea 0
    {
        return 1;
    }
    int cambio[4] = {1, 2, 3, 4};
    for (int i = 0; i < 4; i = i + 1)
    {
        if (i + 1 == pNum)
        {
            indice = cambio[i];
            indiceSec = cambio[((indice) % 4)];
        }
    }
    return indiceSec;
}

int determinarRegiones(int pRegion) // La idea de esta funcion era crear un vector con todas las secciones adyacentes que tenia una region para despues meterla en una clase.
{
    vector<int> numeros = {0};
    int n, s, e, o;

    int busqueda = listaRegiones[pRegion - 1];

    cout << busqueda << "Bsu" << endl;

    for (int i = 1; i <= 6; i = i + 1)
    {
        for (int j = 1; j <= 8; j = j + 1)
        {
            int flagN = 0;
            int flagS = 0;
            int flagE = 0;
            int flagO = 0;
            cout << mapaRegiones[i][j] << endl;
            if (busqueda == mapaRegiones[i][j]) // Si el buscador es igual al puntero
            {
                // cout << "aca entra? " << endl;
                mapaRegiones[i - 1][j] = n; // 0
                mapaRegiones[i + 1][j] = s; // 1
                mapaRegiones[i][j + 1] = e; // 2
                mapaRegiones[i][j - 1] = o; // 3
                if (n != 0 && n != busqueda && n < 1000)
                {
                    cout << "bandera1.2" << endl;
                    for (int i = 0; i < numeros.size(); i = i + 1)
                    {
                        if (numeros[i] == n)
                        {
                            flagN = 1;
                        }
                    }
                    if (flagN == 0)
                    {
                        cout << "Bandera 1" << endl;
                        numeros.push_back(n);
                    }
                }
                if (s != 0 && s != busqueda && s < 1000)
                {
                    cout << "bandera2.2" << endl;
                    for (int i = 0; i < numeros.size(); i = i + 1)
                    {
                        if (numeros[i] == s)
                        {
                            flagS = 1;
                        }
                    }
                    if (flagS == 0)
                    {
                        cout << "Bandera 2" << endl;
                        numeros.push_back(s);
                    }
                }
                if (e != 0 && e != busqueda && e < 1000)
                {
                    cout << "bandera3.2" << endl;
                    for (int i = 0; i < numeros.size(); i = i + 1)
                    {
                        if (numeros[i] == e)
                        {
                            flagE = 1;
                        }
                    }
                    if (flagE == 0)
                    {
                        cout << "Bandera 3" << endl;
                        numeros.push_back(e);
                    }
                }
                if (o != 0 && o != busqueda && o < 1000)
                {
                    cout << "bandera4.2" << endl;
                    for (int i = 0; i < numeros.size(); i = i + 1) //{1,2,6}
                    {
                        if (numeros[i] == o)
                        {
                            flagO = 1;
                        }
                    }
                    if (flagO == 0)
                    {
                        cout << "Bandera 4" << endl;
                        numeros.push_back(o);
                    }
                }
            }
        }
    }
    for (int i = 0; i < numeros.size(); i = i + 1)
    {
        cout << numeros[i] << endl;
    }
    return 0;
}

int funcionDefinirColor() // Como la funcion deteminarRegiones no sirvio voy a poner los datos manualmende de como debia servir la funcion para demostrar que la parte de escojer colores sirve.
{

    int color = 4;
    int iAnterior = 0;
    bool flagTeorema = true;
    struct tipoRegion region[8] = {{1, 0, {2, 7}}, {2, 0, {1, 8, 3}}, {3, 0, {2, 4, 8}}, {4, 0, {3, 5, 8}}, {5, 0, {4, 6, 8}}, {6, 0, {5}}, {7, 0, {1, 8}}, {8, 0, {2, 3, 4, 5, 7}}};
    for (int i = 0; i < 8; i = i + 1)
    {
        int tamArray = *(&region[i].adyacentes + 1) - region[i].adyacentes;
        bool bandera = false;
        do
        {
            if ((region[i].color == region[i].adyacentes[0]) || (region[i].color == region[i].adyacentes[1]) || (region[i].color == region[i].adyacentes[2]) || (region[i].color == region[i].adyacentes[3]) || (region[i].color == region[i].adyacentes[4])) // Compara que todos los posibles arrays sean diferentes
            {
                int x = repeticion(region[i].color);
                region[i].color = x; // Cambia el color para el lado
            }
            else
            {
                bandera = true;
            }
        } while (bandera == false);
        if (iAnterior == region[i].color) // Determina si el teorema es cierto o no
        {
            flagTeorema = false;
        }
    }
    return flagTeorema;
}

int main()
{
    regiones(); 
    // Se crean las regiones del mapa esta linea tenia que crear el array con adyacentes pero no sirvio por alguna razon...
    // for (int i = 1; i <= 8; i = i + 1) // Se pone el tamaÃ±o array que en este caso es 8 regiones
    // {
    //     determinarRegiones(i);
    // }
    
    if (funcionDefinirColor() == true)
    {
        cout << "El mapa cumple el teorema" << endl;
    }
    else
    {
        cout << "El mapa no cumple el teorema" << endl;
    }
}
